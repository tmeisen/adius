package org.adiusframework.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashSet;
import java.util.Set;

/**
 * The JavaDocPostProcessor class processes the output of the javadoc.exe and
 * removes the LOGGER attribute from the table of fields and sets the comments
 * where is specified when the docs where created to a default value, that the
 * svn doesn't recognize a change.
 */
public class JavaDocPostProcessor {
	/** The default path where the generated javadocs are located. */
	private static final String DEFAULT_JAVA_DOC_PATH = "../../07_javadoc";

	/** The default packages that should be edited. */
	private static final String DEFAULT_PACKAGE_NAME = "org.adiusframework";

	/**
	 * The pattern of the line which indicates the start of a table-row in the
	 * field-section.
	 */
	private static final String LINE_PATTERN_START = "<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">";

	/**
	 * The pattern of the line in the table-row which indicates that this row
	 * describes the LOGGER.
	 */
	private static final String LINE_PATTERN_CONTAINING = "<CODE>private static&nbsp;org.slf4j.Logger</CODE></FONT></TD>";

	/** The pattern of the line which indicates the end of the table-row. */
	private static final String LINE_PATTERN_END = "</TR>";

	/**
	 * The first pattern which identifies a line where the date of creation is
	 * located.
	 */
	private static final String LINE_PATTERN_1 = "<\\!-- Generated by javadoc .* -->";

	/**
	 * The line that should be inserted instead of the line that matches
	 * {@link #LINE_PATTERN_1}.
	 */
	private static final String REPLACE_LINE_1 = "<!-- Generated by javadoc (build 1.6.0_20) on Mon Jul 02 20:18:54 CEST 2012 -->";

	/**
	 * The second pattern which identifies a line where the date of creation is
	 * located.
	 */
	private static final String LINE_PATTERN_2 = "<META NAME=\"date\" CONTENT=\"[-\\d]*\">";

	/**
	 * The line that should be inserted instead of the line that matches
	 * {@link #LINE_PATTERN_2}.
	 */
	private static final String REPLACE_LINE_2 = "<META NAME=\"date\" CONTENT=\"2012-07-02\">";

	/** The coding of the result. */
	private static final String ENCODING = "UTF8";

	/** The path to the javadocs. */
	private String path;

	/**
	 * A List of LineChangers that are applied to the line from the
	 * javadoc-file.
	 */
	private Set<LineChanger> changers;

	/**
	 * Creates a new JavaDocPostProcessor which will process the javadocs at a
	 * specified path.
	 * 
	 * @param path
	 *            The path of teh javadocs to be processed.
	 */
	public JavaDocPostProcessor(String path) {
		this.path = path;

		changers = new HashSet<LineChanger>();
		changers.add(new PatternBasedChanger(LINE_PATTERN_1, REPLACE_LINE_1));
		changers.add(new PatternBasedChanger(LINE_PATTERN_2, REPLACE_LINE_2));
		changers.add(new MultiLineExcluder(LINE_PATTERN_START, LINE_PATTERN_CONTAINING, LINE_PATTERN_END));
	}

	/**
	 * Processes all files that are in a given package.
	 * 
	 * @param name
	 *            The name of the package.
	 */
	private void processPackage(String name) {
		File base = new File(path + "/" + name.replace(".", "/"));

		int count = 0;
		for (String fileName : base.list()) {
			File file = new File(base.getPath() + "/" + fileName);
			if (file.isDirectory()) {
				processPackage(name + "." + fileName);
			} else {
				try {
					StringBuilder data = new StringBuilder();

					BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
					while (reader.ready()) {
						String line = reader.readLine();

						for (LineChanger lc : changers) {
							if (line != null) {
								line = lc.changeTo(line);
							}
						}

						if (line != null) {
							data.append(line + "\n");
						}
					}
					reader.close();

					BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),
							ENCODING));
					writer.write(data.toString());
					writer.close();

					count++;
				} catch (IOException exception) {
					exception.printStackTrace();
				}
			}
		}

		System.out.println(count + " Datein wurden erfolgreich im Paket " + name + " bearbeitet!");
	}

	/**
	 * Creates and runs the JavaDocPostProcessor with default attributes.
	 * 
	 * @param args
	 *            Are not considered.
	 */
	public static void main(String[] args) {
		new JavaDocPostProcessor(DEFAULT_JAVA_DOC_PATH).processPackage(DEFAULT_PACKAGE_NAME);
	}
}
