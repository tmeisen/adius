/* Generated By:JavaCC: Do not edit this line. PDDL21parserConstants.java */
package javaff.parser;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface PDDL21ParserConstants {

	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int OPEN = 5;
	/** RegularExpression Id. */
	int CLOSE = 6;
	/** RegularExpression Id. */
	int DEFINE = 7;
	/** RegularExpression Id. */
	int DOMAIN = 8;
	/** RegularExpression Id. */
	int DOMAIN_LABEL = 9;
	/** RegularExpression Id. */
	int OBJECTS = 10;
	/** RegularExpression Id. */
	int GOAL = 11;
	/** RegularExpression Id. */
	int INIT = 12;
	/** RegularExpression Id. */
	int METRIC = 13;
	/** RegularExpression Id. */
	int PROBLEM = 14;
	/** RegularExpression Id. */
	int REQUIREMENTS = 15;
	/** RegularExpression Id. */
	int REQUIREMENT_LABELS = 16;
	/** RegularExpression Id. */
	int NON_HANDLED_LABELS = 17;
	/** RegularExpression Id. */
	int TYPES = 18;
	/** RegularExpression Id. */
	int EITHER = 19;
	/** RegularExpression Id. */
	int CONSTANTS = 20;
	/** RegularExpression Id. */
	int PREDICATES = 21;
	/** RegularExpression Id. */
	int FUNCTIONS = 22;
	/** RegularExpression Id. */
	int ACTION = 23;
	/** RegularExpression Id. */
	int DURATIVE_ACTION = 24;
	/** RegularExpression Id. */
	int PARAMETERS = 25;
	/** RegularExpression Id. */
	int DURATION = 26;
	/** RegularExpression Id. */
	int DUR_VAR = 27;
	/** RegularExpression Id. */
	int PRECONDITION = 28;
	/** RegularExpression Id. */
	int CONDITION = 29;
	/** RegularExpression Id. */
	int EFFECT = 30;
	/** RegularExpression Id. */
	int AND = 31;
	/** RegularExpression Id. */
	int OR = 32;
	/** RegularExpression Id. */
	int NOT = 33;
	/** RegularExpression Id. */
	int IMPLY = 34;
	/** RegularExpression Id. */
	int OVER_ALL = 35;
	/** RegularExpression Id. */
	int AT_START = 36;
	/** RegularExpression Id. */
	int AT_END = 37;
	/** RegularExpression Id. */
	int FOR_ALL = 38;
	/** RegularExpression Id. */
	int EXISTS = 39;
	/** RegularExpression Id. */
	int EQUALS = 40;
	/** RegularExpression Id. */
	int TYPE_IDENT = 41;
	/** RegularExpression Id. */
	int BINARY_OP = 42;
	/** RegularExpression Id. */
	int BINARY_COMP = 43;
	/** RegularExpression Id. */
	int ASSIGN_OP = 44;
	/** RegularExpression Id. */
	int ASSIGN = 45;
	/** RegularExpression Id. */
	int SCALE_UP = 46;
	/** RegularExpression Id. */
	int SCALE_DOWN = 47;
	/** RegularExpression Id. */
	int INCREASE = 48;
	/** RegularExpression Id. */
	int DECREASE = 49;
	/** RegularExpression Id. */
	int OPTIMIZATION = 50;
	/** RegularExpression Id. */
	int MINIMIZE = 51;
	/** RegularExpression Id. */
	int MAXIMIZE = 52;
	/** RegularExpression Id. */
	int TOTAL_TIME = 53;
	/** RegularExpression Id. */
	int NUMBER_TYPE = 54;
	/** RegularExpression Id. */
	int VAR = 55;
	/** RegularExpression Id. */
	int NUMBER = 56;
	/** RegularExpression Id. */
	int NAME = 57;
	/** RegularExpression Id. */
	int SINGLE_LINE_COMMENT = 58;

	/** Lexical state. */
	int DEFAULT = 0;

	/** Literal token values. */
	String[] tokenImage = { "<EOF>", "\" \"", "\"\\r\"", "\"\\t\"", "\"\\n\"", "\"(\"", "\")\"", "\"define\"",
			"\"domain\"", "\":domain\"", "\":objects\"", "\":goal\"", "\":init\"", "\":metric\"", "\"problem\"",
			"\":requirements\"", "<REQUIREMENT_LABELS>", "<NON_HANDLED_LABELS>", "\":types\"", "\"either\"",
			"\":constants\"", "\":predicates\"", "\":functions\"", "\":action\"", "\":durative-action\"",
			"\":parameters\"", "\":duration\"", "\"?duration\"", "\":precondition\"", "\":condition\"", "\":effect\"",
			"\"and\"", "\"or\"", "\"not\"", "\"imply\"", "\"over all\"", "\"at start\"", "\"at end\"", "\"forall\"",
			"\"exists\"", "\"=\"", "\"-\"", "<BINARY_OP>", "<BINARY_COMP>", "<ASSIGN_OP>", "\"assign\"",
			"\"scale-up\"", "\"scale-down\"", "\"increase\"", "\"decrease\"", "<OPTIMIZATION>", "\"minimize\"",
			"\"maximize\"", "\"total-time\"", "\"number\"", "<VAR>", "<NUMBER>", "<NAME>", "<SINGLE_LINE_COMMENT>", };

}
